#!/bin/python3

'''
example install.json:


{
    "dependencies": [
        "aur package",
        "package"
    ],
    "install": [
        {
            "question": "MÃ¶chtest du die gitconfig installieren?",
            "answer": {
                "yes": [
                    "copy .gitconfig ~/.gitconfig"
                ],
                "no": [],
                "{myVar}": [ "run echo {myVar}" ]
            }
        },
        "append .Xdefaults ~/.Xdefaults",
        "run systemctl start bla"
    ]
}
'''

import os
import json

RES_DIR = 'res'

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def get_path(base_path, path):
    if path.startswith('~'):
        return os.path.expanduser(path)
    if path.startswith('/'):
        return path
    return base_path + '/' + path                

def run_instructions(instructions, variables = {}):
    for instruction in instructions:
        # terminal instruction
        if type(instruction) == str:
            for varname in variables:
                instruction = instruction.replace(varname, variables[varname])
            action = instruction.split(' ')[0]
            parameters = instruction.split(' ')[1:]

            # runs a bash command
            # run <command parameter parameter ...>
            if action == 'run':
                os.system('cd ' + RES_DIR + '/' + application + ' && ' + instruction[len(action) + 1:])

            # copies a file or directory
            # copy <from> <to>
            elif action == 'copy':
                os.system('sudo python src/copyFile.py ' + get_path(RES_DIR + '/' + application, parameters[0]) + ' ' + get_path(RES_DIR + '/' + application, parameters[1]))
            
            # appends the content of one file to the content of another file
            # append <fileToAppend> <fileToBeAppendedTo>
            elif action == 'append':
                os.system('sudo python src/appendFile.py ' + get_path(RES_DIR + '/' + application, parameters[0]) + ' ' + get_path(RES_DIR + '/' + application, parameters[1]))

            # replaces a string with another
            # replace <filename> <stringToReplace> <stringToPutIn>
            elif action == 'replace':
                os.system('sudo python src/replaceStringInFile.py ' + get_path(RES_DIR + '/' + application, parameters[0]) + ' ' + parameters[1] + ' ' + parameters[2])
        
        # conditional instructions
        if type(instruction) == dict:
            waiting = True
            while waiting:
                answer = input('\n' + instruction['question'] + '\n > ')
                if instruction['answer'].get(answer):
                    run_instructions(instruction['answer'][answer])
                    waiting = False
                    break

                for ans in instruction['answer']:
                    if ans.startswith('{') and ans.endswith('}'):
                        variables.update({ans: answer})
                        run_instructions(instruction['answer'][ans], variables)
                        waiting = False
                        break
                
                if waiting:
                    print(bcolors.FAIL + 'ERROR: illegal answer' + bcolors.ENDC)


################################
###   install yay from aur   ###
################################
if not os.path.isfile('/usr/bin/yay'):
    print(bcolors.OKBLUE + 'installing yay from aur ...' + bcolors.ENDC)
    try:
        os.mkdir('tmp')
    except:
        pass
    os.system('cd tmp && git clone https://aur.archlinux.org/yay.git')
    os.system('cd tmp/yay && makepkg -is')
else:
    print(bcolors.OKBLUE + 'yay is installed on your system' + bcolors.ENDC)

##################################
###   configure applications   ###
##################################
for application in os.listdir(RES_DIR):
    print('setting up "' + application + '" ...')

    try:
        with open(RES_DIR + '/' + application + '/install.json', 'r') as f:
            instructions = json.load(f)

            # install dependencies
            print(bcolors.OKBLUE + '    installing dependencies ...' + bcolors.ENDC)
            for dependency in instructions['dependencies']:
                if len(os.popen('pacman -Qs ' + dependency).read()) == 0:
                    print(bcolors.OKBLUE + '        installing dependency "' + dependency + '" ...' + bcolors.ENDC)
                    os.system('yay -S ' + dependency)
                else:
                    print(bcolors.OKBLUE + '        dependency "' + dependency + '" already satisfied' + bcolors.ENDC)

            # run installation instructions
            print(bcolors.OKBLUE + '    running configuration ...' + bcolors.ENDC)
            run_instructions(instructions['install'])

            print(bcolors.OKGREEN + '    finished' + bcolors.ENDC)

    except:
        print(bcolors.FAIL + '    ERROR: unable to open or handle install.json for "' + application + '"' + bcolors.ENDC)
